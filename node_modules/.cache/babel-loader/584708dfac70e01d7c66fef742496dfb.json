{"ast":null,"code":"import _asyncToGenerator from\"C:/Users/gc159/Desktop/nwitter/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";import _regeneratorRuntime from\"C:\\\\Users\\\\gc159\\\\Desktop\\\\nwitter\\\\node_modules\\\\@babel\\\\runtime\\\\regenerator\\\\index.js\";import AuthForm from\"components/AuthForm\";import{signInWithPopup,GoogleAuthProvider,GithubAuthProvider}from\"firebase/auth\";import{authService}from\"myFirebase\";import React from\"react\";import{FontAwesomeIcon}from\"@fortawesome/react-fontawesome\";import{faTwitter,faGoogle,faGithub}from\"@fortawesome/free-brands-svg-icons\";import'auth.css';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var Auth=function Auth(){// google, github으로 로그인\nvar onSocialClick=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(event){var name,provider,data;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:name=event.target.name;if(name===\"google\"){provider=new GoogleAuthProvider();}else if(name===\"github\"){provider=new GithubAuthProvider();}_context.next=4;return signInWithPopup(authService,provider);case 4:data=_context.sent;case 5:case\"end\":return _context.stop();}}},_callee);}));return function onSocialClick(_x){return _ref.apply(this,arguments);};}();return/*#__PURE__*/_jsxs(\"div\",{className:\"authContainer\",children:[/*#__PURE__*/_jsx(FontAwesomeIcon,{className:\"authMainIcon\",icon:faTwitter,size:\"3x\"}),/*#__PURE__*/_jsx(AuthForm,{}),/*#__PURE__*/_jsxs(\"div\",{className:\"authBtns\",children:[/*#__PURE__*/_jsxs(\"button\",{onClick:onSocialClick,name:\"google\",className:\"authBtn\",children:[\"Continue with Google \",/*#__PURE__*/_jsx(FontAwesomeIcon,{icon:faGoogle})]}),/*#__PURE__*/_jsxs(\"button\",{onClick:onSocialClick,name:\"github\",className:\"authBtn\",children:[\"Continue with Github \",/*#__PURE__*/_jsx(FontAwesomeIcon,{icon:faGithub})]})]})]});};export default Auth;","map":{"version":3,"sources":["C:/Users/gc159/Desktop/nwitter/src/routes/Auth.js"],"names":["AuthForm","signInWithPopup","GoogleAuthProvider","GithubAuthProvider","authService","React","FontAwesomeIcon","faTwitter","faGoogle","faGithub","Auth","onSocialClick","event","name","target","provider","data"],"mappings":"oPAAA,MAAOA,CAAAA,QAAP,KAAqB,qBAArB,CACA,OAASC,eAAT,CAA0BC,kBAA1B,CAA8CC,kBAA9C,KAAwE,eAAxE,CACA,OAASC,WAAT,KAA4B,YAA5B,CACA,MAAOC,CAAAA,KAAP,KAAkB,OAAlB,CACA,OAASC,eAAT,KAAgC,gCAAhC,CACA,OACEC,SADF,CAEEC,QAFF,CAGEC,QAHF,KAIO,oCAJP,CAKA,MAAO,UAAP,C,wFAEA,GAAMC,CAAAA,IAAI,CAAG,QAAPA,CAAAA,IAAO,EAAM,CACf;AACA,GAAMC,CAAAA,aAAa,0FAAG,iBAAOC,KAAP,yIAELC,IAFK,CAGdD,KAHc,CAEdE,MAFc,CAELD,IAFK,CAKlB,GAAGA,IAAI,GAAK,QAAZ,CAAqB,CAChBE,QAAQ,CAAG,GAAIb,CAAAA,kBAAJ,EAAX,CACJ,CAFD,IAEO,IAAGW,IAAI,GAAK,QAAZ,CAAqB,CACxBE,QAAQ,CAAG,GAAIZ,CAAAA,kBAAJ,EAAX,CACH,CATiB,sBAUCF,CAAAA,eAAe,CAACG,WAAD,CAAcW,QAAd,CAVhB,QAUZC,IAVY,qEAAH,kBAAbL,CAAAA,aAAa,4CAAnB,CAYA,mBACE,aAAK,SAAS,CAAC,eAAf,wBACE,KAAC,eAAD,EAAiB,SAAS,CAAC,cAA3B,CAA0C,IAAI,CAAEJ,SAAhD,CAA2D,IAAI,CAAC,IAAhE,EADF,cAEE,KAAC,QAAD,IAFF,cAGE,aAAK,SAAS,CAAC,UAAf,wBACE,gBAAQ,OAAO,CAAEI,aAAjB,CAAgC,IAAI,CAAC,QAArC,CAA8C,SAAS,CAAC,SAAxD,gDACqB,KAAC,eAAD,EAAiB,IAAI,CAAEH,QAAvB,EADrB,GADF,cAGE,gBAAQ,OAAO,CAAEG,aAAjB,CAAgC,IAAI,CAAC,QAArC,CAA8C,SAAS,CAAC,SAAxD,gDACqB,KAAC,eAAD,EAAiB,IAAI,CAAEF,QAAvB,EADrB,GAHF,GAHF,GADF,CAYH,CA1BD,CA2BA,cAAeC,CAAAA,IAAf","sourcesContent":["import AuthForm from \"components/AuthForm\";\r\nimport { signInWithPopup, GoogleAuthProvider, GithubAuthProvider } from \"firebase/auth\";\r\nimport { authService } from \"myFirebase\";\r\nimport React from \"react\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport {\r\n  faTwitter,\r\n  faGoogle,\r\n  faGithub,\r\n} from \"@fortawesome/free-brands-svg-icons\";\r\nimport 'auth.css'\r\n\r\nconst Auth = () => {\r\n    // google, github으로 로그인\r\n    const onSocialClick = async (event) => {\r\n        const {\r\n            target: {name}\r\n        } = event;\r\n        let provider;\r\n        if(name === \"google\"){\r\n             provider = new GoogleAuthProvider();\r\n        } else if(name === \"github\"){\r\n            provider = new GithubAuthProvider();\r\n        }\r\n        const data = await signInWithPopup(authService, provider);\r\n    }\r\n    return (\r\n      <div className=\"authContainer\">\r\n        <FontAwesomeIcon className=\"authMainIcon\" icon={faTwitter} size=\"3x\"/>\r\n        <AuthForm />\r\n        <div className=\"authBtns\">\r\n          <button onClick={onSocialClick} name=\"google\" className=\"authBtn\">\r\n          Continue with Google <FontAwesomeIcon icon={faGoogle} /></button>\r\n          <button onClick={onSocialClick} name=\"github\" className=\"authBtn\">\r\n          Continue with Github <FontAwesomeIcon icon={faGithub} /></button>\r\n        </div>\r\n      </div>\r\n    )\r\n}\r\nexport default Auth"]},"metadata":{},"sourceType":"module"}