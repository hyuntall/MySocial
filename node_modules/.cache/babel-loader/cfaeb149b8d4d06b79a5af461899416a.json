{"ast":null,"code":"import _slicedToArray from\"C:/Users/gc159/Desktop/nwitter/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import React,{useEffect,useState}from\"react\";import AppRouter from\"components/Router\";import{authService}from\"myFirebase\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";function App(){var _useState=useState(false),_useState2=_slicedToArray(_useState,2),init=_useState2[0],setInit=_useState2[1];var _useState3=useState(false),_useState4=_slicedToArray(_useState3,2),isLoggedIn=_useState4[0],setIsLoggedIn=_useState4[1];var _useState5=useState(null),_useState6=_slicedToArray(_useState5,2),userObj=_useState6[0],setUserObj=_useState6[1];useEffect(function(){// 인증 정보 확인\nauthService.onAuthStateChanged(function(user){if(user){setIsLoggedIn(true);setUserObj({displayName:user.displayName,photoURL:user.photoURL,uid:user.uid,updateProfile:function updateProfile(args){return user.updateProfile(user,{displayName:user.displayName,photoURL:user.photoURL});}});}else{setIsLoggedIn(false);}setInit(true);});},[]);var refreshUser=function refreshUser(){// 유저 정보 변경 시 리프레시 하는 함수\nvar user=authService.currentUser;setUserObj({displayName:user.displayName,photoURL:user.photoURL,uid:user.uid,updateProfile:function updateProfile(args){return user.updateProfile(args);}});};return/*#__PURE__*/ (// 인증 정보 확인 완료 시 앱라우터에 유저 정보와 로그인 유무 전달\n_jsxs(_Fragment,{children:[init?/*#__PURE__*/_jsx(AppRouter,{refreshUser:refreshUser,isLoggedIn:isLoggedIn,userObj:userObj}):\"Initializing...\",/*#__PURE__*/_jsxs(\"footer\",{children:[\"\\xA9 Nwitter \",new Date().getFullYear()]})]}));}export default App;","map":{"version":3,"sources":["C:/Users/gc159/Desktop/nwitter/src/components/App.js"],"names":["React","useEffect","useState","AppRouter","authService","App","init","setInit","isLoggedIn","setIsLoggedIn","userObj","setUserObj","onAuthStateChanged","user","displayName","photoURL","uid","updateProfile","args","refreshUser","currentUser","Date","getFullYear"],"mappings":"oHAAA,MAAOA,CAAAA,KAAP,EAAgBC,SAAhB,CAA2BC,QAA3B,KAA2C,OAA3C,CACA,MAAOC,CAAAA,SAAP,KAAsB,mBAAtB,CACA,OAASC,WAAT,KAA4B,YAA5B,C,6IAEA,QAASC,CAAAA,GAAT,EAAe,CACb,cAAwBH,QAAQ,CAAC,KAAD,CAAhC,wCAAOI,IAAP,eAAaC,OAAb,eACA,eAAoCL,QAAQ,CAAC,KAAD,CAA5C,yCAAOM,UAAP,eAAmBC,aAAnB,eACA,eAA8BP,QAAQ,CAAC,IAAD,CAAtC,yCAAOQ,OAAP,eAAgBC,UAAhB,eACAV,SAAS,CAAC,UAAM,CACd;AACAG,WAAW,CAACQ,kBAAZ,CAA+B,SAACC,IAAD,CAAU,CACvC,GAAGA,IAAH,CAAQ,CACNJ,aAAa,CAAC,IAAD,CAAb,CACAE,UAAU,CAAC,CACTG,WAAW,CAAED,IAAI,CAACC,WADT,CAETC,QAAQ,CAAEF,IAAI,CAACE,QAFN,CAGTC,GAAG,CAAEH,IAAI,CAACG,GAHD,CAITC,aAAa,CAAE,uBAACC,IAAD,QAAUL,CAAAA,IAAI,CAACI,aAAL,CAAmBJ,IAAnB,CAAyB,CAACC,WAAW,CAAED,IAAI,CAACC,WAAnB,CAAgCC,QAAQ,CAAEF,IAAI,CAACE,QAA/C,CAAzB,CAAV,EAJN,CAAD,CAAV,CAMD,CARD,IAQO,CACLN,aAAa,CAAC,KAAD,CAAb,CACD,CACDF,OAAO,CAAC,IAAD,CAAP,CACD,CAbD,EAcD,CAhBQ,CAgBN,EAhBM,CAAT,CAiBA,GAAMY,CAAAA,WAAW,CAAG,QAAdA,CAAAA,WAAc,EAAM,CACxB;AACA,GAAMN,CAAAA,IAAI,CAAGT,WAAW,CAACgB,WAAzB,CACAT,UAAU,CAAC,CACTG,WAAW,CAAED,IAAI,CAACC,WADT,CAETC,QAAQ,CAAEF,IAAI,CAACE,QAFN,CAGTC,GAAG,CAAEH,IAAI,CAACG,GAHD,CAITC,aAAa,CAAE,uBAACC,IAAD,QAAUL,CAAAA,IAAI,CAACI,aAAL,CAAmBC,IAAnB,CAAV,EAJN,CAAD,CAAV,CAMD,CATD,CAUA,oBAAQ;AACR,2BACGZ,IAAI,cAAG,KAAC,SAAD,EACR,WAAW,CAAEa,WADL,CAER,UAAU,CAAEX,UAFJ,CAGR,OAAO,CAAEE,OAHD,EAAH,CAGiB,iBAJxB,cAKE,0CAAwB,GAAIW,CAAAA,IAAJ,GAAWC,WAAX,EAAxB,GALF,GADA,EASD,CAED,cAAejB,CAAAA,GAAf","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport AppRouter from \"components/Router\";\nimport { authService } from \"myFirebase\";\n\nfunction App() {\n  const [init, setInit] = useState(false);\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n  const [userObj, setUserObj] = useState(null);\n  useEffect(() => {\n    // 인증 정보 확인\n    authService.onAuthStateChanged((user) => {\n      if(user){\n        setIsLoggedIn(true);\n        setUserObj({\n          displayName: user.displayName,\n          photoURL: user.photoURL,\n          uid: user.uid,\n          updateProfile: (args) => user.updateProfile(user, {displayName: user.displayName, photoURL: user.photoURL}),\n        });\n      } else {\n        setIsLoggedIn(false);\n      }\n      setInit(true);\n    });\n  }, [])\n  const refreshUser = () => {\n    // 유저 정보 변경 시 리프레시 하는 함수\n    const user = authService.currentUser;\n    setUserObj({\n      displayName: user.displayName,\n      photoURL: user.photoURL,\n      uid: user.uid,\n      updateProfile: (args) => user.updateProfile(args),\n    });\n  }\n  return (// 인증 정보 확인 완료 시 앱라우터에 유저 정보와 로그인 유무 전달\n  <>\n    {init ? <AppRouter \n    refreshUser={refreshUser}\n    isLoggedIn={isLoggedIn} \n    userObj={userObj}/> : \"Initializing...\"}\n    <footer>&copy; Nwitter {new Date().getFullYear()}</footer>\n  </>\n  )\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}