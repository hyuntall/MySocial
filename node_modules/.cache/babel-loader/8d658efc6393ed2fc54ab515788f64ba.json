{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\gc159\\\\Desktop\\\\nwitter\\\\src\\\\components\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport AppRouter from \"components/Router\";\nimport { authService } from \"myFirebase\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [init, setInit] = useState(false);\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n  const [userObj, setUserObj] = useState(null);\n  useEffect(() => {\n    // 인증 정보 확인\n    authService.onAuthStateChanged(user => {\n      if (user) {\n        setIsLoggedIn(true);\n        setUserObj({\n          displayName: user.displayName,\n          profileImage: user.profileImage,\n          uid: user.uid,\n          updateProfile: args => user.updateProfile(user, {\n            displayName: user.displayName,\n            profileImage: user.profileImage\n          })\n        });\n      } else {\n        setIsLoggedIn(false);\n      }\n\n      setInit(true);\n    });\n  }, []);\n\n  const refreshUser = () => {\n    // 유저 정보 변경 시 리프레시 하는 함수\n    const user = authService.currentUser;\n    setUserObj({\n      displayName: user.displayName,\n      profileImage: user.profileImage,\n      uid: user.uid,\n      updateProfile: args => user.updateProfile(args)\n    });\n  };\n\n  return (\n    /*#__PURE__*/\n    // 인증 정보 확인 완료 시 앱라우터에 유저 정보와 로그인 유무 전달\n    _jsxDEV(_Fragment, {\n      children: [init ? /*#__PURE__*/_jsxDEV(AppRouter, {\n        refreshUser: refreshUser,\n        isLoggedIn: isLoggedIn,\n        userObj: userObj\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 13\n      }, this) : \"Initializing...\", /*#__PURE__*/_jsxDEV(\"footer\", {\n        children: [\"\\xA9 Nwitter \", new Date().getFullYear()]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true)\n  );\n}\n\n_s(App, \"+8UWPZeDHvBWUbvjuGH9aya/3CQ=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/Users/gc159/Desktop/nwitter/src/components/App.js"],"names":["React","useEffect","useState","AppRouter","authService","App","init","setInit","isLoggedIn","setIsLoggedIn","userObj","setUserObj","onAuthStateChanged","user","displayName","profileImage","uid","updateProfile","args","refreshUser","currentUser","Date","getFullYear"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAOC,SAAP,MAAsB,mBAAtB;AACA,SAASC,WAAT,QAA4B,YAA5B;;;;AAEA,SAASC,GAAT,GAAe;AAAA;;AACb,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBL,QAAQ,CAAC,KAAD,CAAhC;AACA,QAAM,CAACM,UAAD,EAAaC,aAAb,IAA8BP,QAAQ,CAAC,KAAD,CAA5C;AACA,QAAM,CAACQ,OAAD,EAAUC,UAAV,IAAwBT,QAAQ,CAAC,IAAD,CAAtC;AACAD,EAAAA,SAAS,CAAC,MAAM;AACd;AACAG,IAAAA,WAAW,CAACQ,kBAAZ,CAAgCC,IAAD,IAAU;AACvC,UAAGA,IAAH,EAAQ;AACNJ,QAAAA,aAAa,CAAC,IAAD,CAAb;AACAE,QAAAA,UAAU,CAAC;AACTG,UAAAA,WAAW,EAAED,IAAI,CAACC,WADT;AAETC,UAAAA,YAAY,EAAEF,IAAI,CAACE,YAFV;AAGTC,UAAAA,GAAG,EAAEH,IAAI,CAACG,GAHD;AAITC,UAAAA,aAAa,EAAGC,IAAD,IAAUL,IAAI,CAACI,aAAL,CAAmBJ,IAAnB,EAAyB;AAACC,YAAAA,WAAW,EAAED,IAAI,CAACC,WAAnB;AAAgCC,YAAAA,YAAY,EAAEF,IAAI,CAACE;AAAnD,WAAzB;AAJhB,SAAD,CAAV;AAMD,OARD,MAQO;AACLN,QAAAA,aAAa,CAAC,KAAD,CAAb;AACD;;AACDF,MAAAA,OAAO,CAAC,IAAD,CAAP;AACD,KAbD;AAcD,GAhBQ,EAgBN,EAhBM,CAAT;;AAiBA,QAAMY,WAAW,GAAG,MAAM;AACxB;AACA,UAAMN,IAAI,GAAGT,WAAW,CAACgB,WAAzB;AACAT,IAAAA,UAAU,CAAC;AACTG,MAAAA,WAAW,EAAED,IAAI,CAACC,WADT;AAETC,MAAAA,YAAY,EAAEF,IAAI,CAACE,YAFV;AAGTC,MAAAA,GAAG,EAAEH,IAAI,CAACG,GAHD;AAITC,MAAAA,aAAa,EAAGC,IAAD,IAAUL,IAAI,CAACI,aAAL,CAAmBC,IAAnB;AAJhB,KAAD,CAAV;AAMD,GATD;;AAUA;AAAA;AAAQ;AACR;AAAA,iBACGZ,IAAI,gBAAG,QAAC,SAAD;AACR,QAAA,WAAW,EAAEa,WADL;AAER,QAAA,UAAU,EAAEX,UAFJ;AAGR,QAAA,OAAO,EAAEE;AAHD;AAAA;AAAA;AAAA;AAAA,cAAH,GAGiB,iBAJxB,eAKE;AAAA,oCAAwB,IAAIW,IAAJ,GAAWC,WAAX,EAAxB;AAAA;AAAA;AAAA;AAAA;AAAA,cALF;AAAA;AADA;AASD;;GAxCQjB,G;;KAAAA,G;AA0CT,eAAeA,GAAf","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport AppRouter from \"components/Router\";\nimport { authService } from \"myFirebase\";\n\nfunction App() {\n  const [init, setInit] = useState(false);\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n  const [userObj, setUserObj] = useState(null);\n  useEffect(() => {\n    // 인증 정보 확인\n    authService.onAuthStateChanged((user) => {\n      if(user){\n        setIsLoggedIn(true);\n        setUserObj({\n          displayName: user.displayName,\n          profileImage: user.profileImage,\n          uid: user.uid,\n          updateProfile: (args) => user.updateProfile(user, {displayName: user.displayName, profileImage: user.profileImage}),\n        });\n      } else {\n        setIsLoggedIn(false);\n      }\n      setInit(true);\n    });\n  }, [])\n  const refreshUser = () => {\n    // 유저 정보 변경 시 리프레시 하는 함수\n    const user = authService.currentUser;\n    setUserObj({\n      displayName: user.displayName,\n      profileImage: user.profileImage,\n      uid: user.uid,\n      updateProfile: (args) => user.updateProfile(args),\n    });\n  }\n  return (// 인증 정보 확인 완료 시 앱라우터에 유저 정보와 로그인 유무 전달\n  <>\n    {init ? <AppRouter \n    refreshUser={refreshUser}\n    isLoggedIn={isLoggedIn} \n    userObj={userObj}/> : \"Initializing...\"}\n    <footer>&copy; Nwitter {new Date().getFullYear()}</footer>\n  </>\n  )\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}