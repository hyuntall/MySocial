[{"C:\\Users\\gc159\\Desktop\\nwitter\\src\\index.js":"1","C:\\Users\\gc159\\Desktop\\nwitter\\src\\components\\App.js":"2","C:\\Users\\gc159\\Desktop\\nwitter\\src\\components\\Router.js":"3","C:\\Users\\gc159\\Desktop\\nwitter\\src\\routes\\Auth.js":"4","C:\\Users\\gc159\\Desktop\\nwitter\\src\\routes\\Home.js":"5","C:\\Users\\gc159\\Desktop\\nwitter\\src\\myFirebase.js":"6","C:\\Users\\gc159\\Desktop\\nwitter\\src\\components\\Navigation.js":"7","C:\\Users\\gc159\\Desktop\\nwitter\\src\\routes\\Profile.js":"8","C:\\Users\\gc159\\Desktop\\nwitter\\src\\components\\AuthForm.js":"9","C:\\Users\\gc159\\Desktop\\nwitter\\src\\components\\Post.js":"10","C:\\Users\\gc159\\Desktop\\nwitter\\src\\components\\PostFactory.js":"11","C:\\Users\\gc159\\Desktop\\nwitter\\src\\components\\Headaer.js":"12"},{"size":285,"mtime":1646554299955,"results":"13","hashOfConfig":"14"},{"size":1422,"mtime":1646554277869,"results":"15","hashOfConfig":"14"},{"size":1078,"mtime":1646491034860,"results":"16","hashOfConfig":"14"},{"size":1403,"mtime":1646490529292,"results":"17","hashOfConfig":"14"},{"size":1157,"mtime":1646502279935,"results":"18","hashOfConfig":"14"},{"size":931,"mtime":1645796248705,"results":"19","hashOfConfig":"14"},{"size":780,"mtime":1646553620812,"results":"20","hashOfConfig":"14"},{"size":4745,"mtime":1646501444475,"results":"21","hashOfConfig":"14"},{"size":2375,"mtime":1646490840207,"results":"22","hashOfConfig":"14"},{"size":3383,"mtime":1646554855244,"results":"23","hashOfConfig":"14"},{"size":4112,"mtime":1646502162092,"results":"24","hashOfConfig":"14"},{"size":330,"mtime":1646554426790,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","suppressedMessages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"16vmfq3",{"filePath":"29","messages":"30","suppressedMessages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"32","messages":"33","suppressedMessages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"35","messages":"36","suppressedMessages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38"},{"filePath":"39","messages":"40","suppressedMessages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"42","messages":"43","suppressedMessages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"46","messages":"47","suppressedMessages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"49","messages":"50","suppressedMessages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52"},{"filePath":"53","messages":"54","suppressedMessages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"56","messages":"57","suppressedMessages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"59","messages":"60","suppressedMessages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62"},{"filePath":"63","messages":"64","suppressedMessages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\gc159\\Desktop\\nwitter\\src\\index.js",[],[],"C:\\Users\\gc159\\Desktop\\nwitter\\src\\components\\App.js",[],[],"C:\\Users\\gc159\\Desktop\\nwitter\\src\\components\\Router.js",[],[],"C:\\Users\\gc159\\Desktop\\nwitter\\src\\routes\\Auth.js",["66"],[],"import AuthForm from \"components/AuthForm\";\r\nimport { signInWithPopup, GoogleAuthProvider, GithubAuthProvider } from \"firebase/auth\";\r\nimport { authService } from \"myFirebase\";\r\nimport React from \"react\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport {\r\n  faTwitter,\r\n  faGoogle,\r\n  faGithub,\r\n} from \"@fortawesome/free-brands-svg-icons\";\r\nimport 'auth.css'\r\n\r\nconst Auth = () => {\r\n    // google, github으로 로그인\r\n    const onSocialClick = async (event) => {\r\n        const {\r\n            target: {name}\r\n        } = event;\r\n        let provider;\r\n        if(name === \"google\"){\r\n             provider = new GoogleAuthProvider();\r\n        } else if(name === \"github\"){\r\n            provider = new GithubAuthProvider();\r\n        }\r\n        const data = await signInWithPopup(authService, provider);\r\n    }\r\n    return (\r\n      <div className=\"authContainer\">\r\n        <FontAwesomeIcon className=\"authMainIcon\" icon={faTwitter} size=\"3x\"/>\r\n        <AuthForm />\r\n        <div className=\"authBtns\">\r\n          <button onClick={onSocialClick} name=\"google\" className=\"authBtn\">\r\n          Continue with Google <FontAwesomeIcon icon={faGoogle} /></button>\r\n          <button onClick={onSocialClick} name=\"github\" className=\"authBtn\">\r\n          Continue with Github <FontAwesomeIcon icon={faGithub} /></button>\r\n        </div>\r\n      </div>\r\n    )\r\n}\r\nexport default Auth","C:\\Users\\gc159\\Desktop\\nwitter\\src\\routes\\Home.js",[],[],"C:\\Users\\gc159\\Desktop\\nwitter\\src\\myFirebase.js",[],[],["67","68"],"C:\\Users\\gc159\\Desktop\\nwitter\\src\\components\\Navigation.js",["69","70","71","72","73"],[],"C:\\Users\\gc159\\Desktop\\nwitter\\src\\routes\\Profile.js",["74","75"],[],"import { authService, dbService, storageService } from \"myFirebase\";\r\nimport { collection, onSnapshot, query, where, orderBy } from \"@firebase/firestore\";\r\nimport { updateProfile } from \"@firebase/auth\";\r\nimport { getDownloadURL, ref, uploadString } from \"firebase/storage\"\r\nimport {v4} from \"uuid\";\r\nimport React, { useEffect, useState, useRef } from \"react\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faPlus } from \"@fortawesome/free-solid-svg-icons\";\r\nimport Post from \"components/Post\";\r\nimport 'profile.css'\r\nexport default ({ userObj, refreshUser }) => {\r\n    const [newDisplayName, setNewDisplayName] = useState(userObj.displayName);\r\n    const [attachment, setAttachment] = useState(userObj.photoURL);\r\n    const fileInput = useRef();\r\n    const [myPosts, setMyPosts] = useState([]);\r\n    const onLogOutClick = () => {\r\n        // 로그아웃 함수\r\n        // 후에 유저 정보 리프레시\r\n        authService.signOut()\r\n        refreshUser();\r\n    };\r\n    const onChange = (event) => {\r\n        const { target: { value } } = event;\r\n        setNewDisplayName(value);\r\n    }\r\n\r\n    const onFileChange = (event) => {\r\n        // 이미지 입력 시 url을 읽는 함수\r\n        const {target:{files}} = event;\r\n        const theFile = files[0];\r\n        const reader = new FileReader();\r\n        reader.onloadend = (finishEvent) => {\r\n            const {currentTarget: { result }} = finishEvent\r\n            setAttachment(result)\r\n        }\r\n        reader.readAsDataURL(theFile);\r\n    }\r\n\r\n    const onSubmit = async (event) => {\r\n        // 프로필 변경 함수\r\n        event.preventDefault();\r\n\r\n        let attachmentURL = \"\";\r\n        if(attachment !== \"\"){\r\n            // 이미지 첨부 했을 경우\r\n            // 파일 경로 참조 생성\r\n            const attachmentRef = ref(storageService, `${userObj.uid}/${v4()}`);//v4: 랜덤숫자\r\n            // storage 참조 경로로 파일 업로드\r\n            const uploadFile = await uploadString(attachmentRef, attachment, \"data_url\");\r\n            // storage에 있는 파일 URL로 다운\r\n            attachmentURL = await getDownloadURL(uploadFile.ref)\r\n            console.log(attachmentURL);\r\n            // 유저 프로필 이미지 업데이트\r\n            await updateProfile(authService.currentUser, {displayName: newDisplayName, photoURL: attachmentURL});\r\n            // 프사 업로드 기능도 만들어보기!\r\n            refreshUser();\r\n        }\r\n\r\n        if(userObj.displayName !== newDisplayName){\r\n            await updateProfile(authService.currentUser, {displayName: newDisplayName, photoURL: attachmentURL});\r\n            // 프사 업로드 기능도 만들어보기!\r\n            refreshUser();\r\n        }\r\n    }\r\n\r\n    const getMyNweets = async () => {\r\n        // 내가 작성한 게시글만 호출\r\n        const q = query(\r\n            collection(dbService, \"posts\"),\r\n            where(\"creatorId\", \"==\", userObj.uid),\r\n            orderBy(\"createdAt\", \"desc\")\r\n        );\r\n        onSnapshot(q, (snapshot) => {\r\n            const postArr = snapshot.docs.map((doc) => ({\r\n                id: doc.id,\r\n                ...doc.data(),\r\n            }));\r\n        setMyPosts(postArr);\r\n        });\r\n    };\r\n    useEffect(() =>{\r\n        getMyNweets();\r\n    })\r\n    \r\n    return (\r\n        <div className=\"container\">\r\n            <form onSubmit={onSubmit} className=\"profileForm\">\r\n                <div className=\"myInfo\">\r\n                    <input type=\"text\" \r\n                    placeholder=\"Display name\"\r\n                    onChange={onChange}\r\n                    autoFocus\r\n                    value={newDisplayName}\r\n                    className=\"formInput\"/>\r\n                    <div className=\"profileImgDiv\">\r\n                            <img className=\"myProfileImg\" src={attachment ? (attachment):(require(\"img/user.png\"))} />\r\n                        <FontAwesomeIcon className=\"plusIcon\" icon={faPlus} size=\"2x\"/>\r\n                        <input id=\"attach-file\" style={{opacity: 0}} // 이미지파일 첨부 버튼\r\n                        type=\"file\" accept=\"image/*\" onChange={onFileChange} ref={fileInput}/>\r\n                    </div>\r\n                </div>\r\n                <input\r\n                type=\"submit\"\r\n                value=\"Update Profile\"\r\n                className=\"formBtn\"/>\r\n            </form>\r\n            <span className=\"formBtn cancelBtn logOut\" onClick={onLogOutClick}>\r\n                Log Out\r\n            </span>\r\n            <div>\r\n                {myPosts.map(post => (\r\n                 <Post key={post.id} postObj={post} isOwner={post.creatorId === userObj.uid}/>\r\n                ))}\r\n            </div>\r\n        </div>\r\n    )\r\n}","C:\\Users\\gc159\\Desktop\\nwitter\\src\\components\\AuthForm.js",[],[],"C:\\Users\\gc159\\Desktop\\nwitter\\src\\components\\Post.js",["76","77"],[],"C:\\Users\\gc159\\Desktop\\nwitter\\src\\components\\PostFactory.js",["78","79"],[],"import React, { useState, useRef } from \"react\";\r\nimport { storageService, dbService } from \"myFirebase\";\r\nimport { addDoc, collection } from \"firebase/firestore\";\r\nimport { getDownloadURL, ref, uploadString } from \"firebase/storage\"\r\nimport {v4} from \"uuid\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faPlus, faTimes } from \"@fortawesome/free-solid-svg-icons\";\r\nimport 'post.css'\r\nconst PostFactory = ({ userObj }) => {\r\n    const [post, setPost] = useState(\"\");\r\n    const [attachment, setAttachment] = useState(\"\");\r\n    const fileInput = useRef();\r\n    const onSubmit = async (event) => {\r\n        // 작성한 게시글 업로드하는 함수\r\n        if (post === \"\") {\r\n            // 작성한 글이 없으면 return\r\n            return;\r\n        }\r\n        event.preventDefault();\r\n        \r\n        try {\r\n            let attachmentURL = \"\";\r\n            if(attachment !== \"\"){\r\n                // 이미지 첨부 했을 경우\r\n                // 파일 경로 참조 생성\r\n                const attachmentRef = ref(storageService, `${userObj.uid}/${v4()}`);//v4: 랜덤숫자\r\n                // storage 참조 경로로 파일 업로드\r\n                const uploadFile = await uploadString(attachmentRef, attachment, \"data_url\");\r\n                // storage에 있는 파일 URL로 다운\r\n                attachmentURL = await getDownloadURL(uploadFile.ref)\r\n                console.log(attachmentURL);\r\n            }\r\n            const docRef = await addDoc(\r\n                // 작성한 게시글 db에 업로드\r\n                collection(\r\n                    dbService, \"posts\"), {\r\n                    text: post,\r\n                    createdAt: Date.now(),\r\n                    creatorId: userObj.uid,\r\n                    creatorName: userObj.displayName,\r\n                    userProfileImg: userObj.photoURL,\r\n                    attachmentURL\r\n            });\r\n            setPost(\"\");\r\n            onClearAttachmentClick();\r\n        } catch (error) {\r\n            console.error(\"Error adding document: \", error);\r\n        }\r\n    };\r\n    const onChange = (event) => {\r\n        const { target:{value} } = event;\r\n        setPost(value);\r\n    }\r\n    const onFileChange = (event) => {\r\n        // 이미지 입력 시 url을 읽는 함수\r\n        const {target:{files}} = event;\r\n        const theFile = files[0];\r\n        const reader = new FileReader();\r\n        reader.onloadend = (finishEvent) => {\r\n            const {currentTarget: { result }} = finishEvent\r\n            setAttachment(result)\r\n        }\r\n        reader.readAsDataURL(theFile);\r\n    }\r\n    const onClearAttachmentClick = () => {\r\n        setAttachment(\"\")\r\n        fileInput.current.value = \"\";\r\n    };\r\n\r\n    return (\r\n        <form onSubmit={onSubmit} className=\"factoryForm\">\r\n            <div className=\"factoryInput__container\">\r\n                <input className=\"FactoryInput_input\"\r\n                value={post} onChange={onChange} \r\n                type=\"text\" placeholder=\"What's on your mind?\" maxLength={120}/>\r\n                <input className=\"factoryInput__arrow\"\r\n                type=\"submit\" value=\"posting\" />\r\n            </div>\r\n\r\n            <label htmlFor=\"attach-file\" className=\"factoryInput_label\">\r\n                <span>Add photos</span>\r\n                <FontAwesomeIcon icon={faPlus} />\r\n            </label>\r\n            <input id=\"attach-file\" style={{opacity: 0}} // 이미지파일 첨부 버튼\r\n            type=\"file\" accept=\"image/*\" onChange={onFileChange} ref={fileInput}/>\r\n            \r\n            {attachment && ( // 첨부한 이미지가 있을 경우 이미지 표시\r\n                <div className=\"factoryForm__attachment\">\r\n                    <img src={attachment} style={{backgroundImage:attachment}} />\r\n                    <div className=\"factoryForm__clear\" onClick={onClearAttachmentClick}>\r\n                        <span>Remove</span>\r\n                        <FontAwesomeIcon icon={faTimes} />\r\n                    </div>\r\n                </div>\r\n            )}\r\n        </form>\r\n    )\r\n}\r\nexport default PostFactory","C:\\Users\\gc159\\Desktop\\nwitter\\src\\components\\Headaer.js",["80"],[],{"ruleId":"81","severity":1,"message":"82","line":25,"column":15,"nodeType":"83","messageId":"84","endLine":25,"endColumn":19},{"ruleId":"85","replacedBy":"86"},{"ruleId":"87","replacedBy":"88"},{"ruleId":"81","severity":1,"message":"89","line":3,"column":10,"nodeType":"83","messageId":"84","endLine":3,"endColumn":25},{"ruleId":"81","severity":1,"message":"90","line":4,"column":10,"nodeType":"83","messageId":"84","endLine":4,"endColumn":19},{"ruleId":"81","severity":1,"message":"91","line":5,"column":10,"nodeType":"83","messageId":"84","endLine":5,"endColumn":16},{"ruleId":"92","severity":1,"message":"93","line":11,"column":13,"nodeType":"94","endLine":11,"endColumn":67},{"ruleId":"92","severity":1,"message":"93","line":15,"column":9,"nodeType":"94","endLine":15,"endColumn":66},{"ruleId":"95","severity":1,"message":"96","line":11,"column":1,"nodeType":"97","endLine":117,"endColumn":2},{"ruleId":"92","severity":1,"message":"93","line":96,"column":29,"nodeType":"94","endLine":96,"endColumn":119},{"ruleId":"92","severity":1,"message":"93","line":55,"column":21,"nodeType":"94","endLine":55,"endColumn":138},{"ruleId":"92","severity":1,"message":"93","line":57,"column":22,"nodeType":"94","endLine":57,"endColumn":76},{"ruleId":"81","severity":1,"message":"98","line":33,"column":19,"nodeType":"83","messageId":"84","endLine":33,"endColumn":25},{"ruleId":"92","severity":1,"message":"93","line":89,"column":21,"nodeType":"94","endLine":89,"endColumn":82},{"ruleId":"92","severity":1,"message":"93","line":8,"column":13,"nodeType":"94","endLine":8,"endColumn":77},"no-unused-vars","'data' is assigned a value but never used.","Identifier","unusedVar","no-native-reassign",["99"],"no-negated-in-lhs",["100"],"'FontAwesomeIcon' is defined but never used.","'faTwitter' is defined but never used.","'faUser' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","'docRef' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]